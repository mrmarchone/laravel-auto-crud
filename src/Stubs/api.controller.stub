<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use {{ requestNamespace }};
use {{ resourceNamespace }};
use {{ modelNamespace }};
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class {{ class }} extends Controller
{
    public function index()
    {
         try {
                ${{ modelVariable }} = {{ model }}::latest()->paginate(10);
                return response()->json([
                'success' => true,
                'message' => '{{ model }} were successfully retrieved',
                'data' => {{ modelVariable }}
                ], Response::HTTP_OK);
            } catch (\Exception $e) {
                return response()->json([
                    'success' => false,
                    'message' => 'Failed to fetch {{ model }}. Please try again',
                    'error' => $e->getMessage()
                ], Response::HTTP_INTERNAL_SERVER_ERROR);
            }
     }

    public function store({{ request }} $request)
    {
        try {
            ${{ modelVariable }} = {{ model }}::create($request->validated());
            return response()->json([
                'success' => true,
                'message' => '{{ model }} has been successfully created',
            ]);
        } catch (\Exception $e) {
            return response()->json([
             'success' => false,
              'message' => 'Failed to create {{ model }}. Please try again',
              'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function show($id)
    {
         try {
          ${{ modelVariable }} = {{ model }}::findOrFail($id);
           return response()->json([
           'success' => true,
            'message' => 'Successfully fetched {{ model }}',
             'data' =>  ${{ modelVariable }}
              ], Response::HTTP_OK);
         } catch (\Exception $e) {
                    return response()->json([
                    'success' => false,
                    'message' => 'Failed to retrieve the {{ model }}. Please try again',
                    'error' => $e->getMessage()
                    ], Response::HTTP_INTERNAL_SERVER_ERROR);
                }

    }

    public function update({{ request }} $request, $id)
    {
        try {
            ${{ modelVariable }} = ${{ model }}::findOrFail($id);
            ${{ modelVariable }}->update($request->validated());
            return response()->json([
             'success' => true,
             'message' => '{ model } has been successfully updated',
              'data' => ${{ modelVariable }}
              ], Response::HTTP_OK);
        } catch (\Exception $e) {
            return response()->json([
            'success' => false,
            'message' => 'Failed to update {{ model }}. Please try again',
            'error' => $e->getMessage(),
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function destroy($id)
    {
        try {
            ${{ modelVariable }}->findOrFail($id);
            ${{ modelVariable }}->delete();
            return response()->json([
            'message' => '{{ model }} has been successfully deleted',
            ], Response::HTTP_OK);
        } catch (\Exception $e) {
            return response()->json([
            'success' => false,
             'message' => 'Failed to delete {{ model }}. Please try again',
             'error' => $e->getMessage()
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
